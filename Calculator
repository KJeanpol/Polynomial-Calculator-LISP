#lang racket
;----------------------  GETTERS FROM COMMON LIST ELEMENTS ---------------------
(define (getCoef mon) (car mon))
(define (getX mon) (cond [(null? mon) false] [else (first(cdr mon))]))
(define (getY mon) (second(cdr mon)))

;-----------------------  USEFUL FUNCTIONS OF MONOMIALS -----------------------

(define (operadorCoef mon mon2 operador) (operador (getCoef mon) (getCoef mon2)))

(define (getNewMonomial coef x y) (list coef x y))

(define (areMonomialEqual mon mon2) (equal? (cdr mon) (cdr mon2)))

(define (operadorMonomial monToEval operador pol2 )(cond
                                                     [(areMonomialEqual monToEval pol2)
                                                          (getNewMonomial (operadorCoef monToEval pol2 operador)
                                           (getX monToEval) (getY monToEval))]
                                                     [else false]))

;------------------  VERIFICATION SIMILARITIES WITHIN THE POLYNOMIAL -----------------------
(define (getNext pol) (second pol))
(define (test pol operador) (map (lambda (x)(operadorMonomial (car pol) x operador)) (cdr pol)))



;Intento

(define (totalMon operador mon polBandera)
  (cond
    ((null? (cdr polBandera)) mon)
       (else (cond
               [(areMonomialEqual mon (car polBandera))
                (totalMon operador (operadorMonomial mon operador (car polBandera)) (remove (car polBandera) polBandera))]
               [else (totalMon operador mon (cdr polBandera))]))))

(define (prueba pol) (map (lambda (x)(* (getCoef x)-1)) pol))
;(define (test pol operador) (map (lambda (x)(operadorMonomial (car pol) x operador)) (cdr pol)))


;(totalMon + '(1 2 3)'((2 3 4) (4 3 4) (1 1 1) (3 3 4)))
;(sumPoli '(2 3 4) '((4 3 4) (1 1 1) (3 3 4)) '((4 3 4) (1 1 1) (3 3 4)))

;(test '((2 3 4) (4 3 4)) -)

;(operadorMonomial '(1 2 3) + '(1 2 3))



