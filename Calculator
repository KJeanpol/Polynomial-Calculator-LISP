#lang racket
;----------------------  GETTERS FROM COMMON LIST ELEMENTS ---------------------
(define (getCoef mon) (car mon))
(define (getX mon) (cond[(null? mon) '(mon)] [else (first(cdr mon))]))
(define (getY mon) (second(cdr mon)))

;-----------------------  USEFUL FUNCTIONS OF MONOMIALS -----------------------

(define (operadorCoef mon mon2 operador) (operador (getCoef mon) (getCoef mon2)))

(define (getNewMonomial coef x y) (list coef x y))

(define (areMonomialEqual mon mon2) (equal? (getX mon) (getX mon2)))

(define (operadorMonomial pol operador pol2 )(cond [(areMonomialEqual pol pol2) (getNewMonomial (operadorCoef pol pol2 operador)
                                           (getX pol) (getY pol))] [else false]))

;-----------------------  USEFUL FUNCTIONS OF POLYNOMIALS -----------------------
(define (concatenate pol pol2)(append pol pol2))
(define (recursividad num) (cond [(= num 0) (1) ] [else (recursividad (* num (- num 1)))]))


;------------------  ADDS ALL MONOMIALS TO A SINGLE LIST (POLYNOMIAL) -----------------------
(define (iteratePol pol pol2 )(cond [(null? (cdr pol)) (concatenate pol2 (car pol))]
                                       [else (iteratePol (cdr pol) (concatenate pol2 (car pol)))]))

;------------------  VERIFICATION SIMILARITIES WITHIN THE POLYNOMIAL -----------------------
(define (getNext pol) (second pol))
(define (test pol operador) (map (lambda (x)(operadorMonomial (car pol) x operador)) (cdr pol)))



;Intento

(define (sumPoli pol polBandera polFinal)
  (cond
    ((null? (cdr polBandera)) (polFinal))
       (else (cond
               [(areMonomialEqual pol (car polBadera)) (sumPoli pol (remove polFinal polBandera) (operadorMonomial pol + polFinal))]
               [else (sumPoli pol (cdr polBandera) (operadorMonomial pol + (car polBadera)))]))))


(sumPoli '(2 3 4) '((4 3 4) (1 1 1) (3 3 4)) '((4 3 4) (1 1 1) (3 3 4)))
(test '((2 3 4) (4 3 4) (1 1 1) (3 3 4)) +)
(test '((2 3 4) (4 3 4)) -)



