#lang racket
;----------------------  GETTERS FROM COMMON LIST ELEMENTS ---------------------
(define (getCoef mon) (car mon))
(define (getX mon) (cond [(null? mon) false] [else (first(cdr mon))]))
(define (getY mon) (second(cdr mon)))

;-----------------------  USEFUL FUNCTIONS OF MONOMIALS -----------------------

(define (operadorCoef mon mon2 operador) (operador (getCoef mon) (getCoef mon2)))

(define (getNewMonomial coef x y) (list coef x y))

(define (areMonomialEqual mon mon2) (equal? (cdr mon) (cdr mon2)))

(define (operadorMonomial monToEval operador pol2 )(cond
                                                     [(areMonomialEqual monToEval pol2)
                                                          (getNewMonomial (operadorCoef monToEval pol2 operador)
                                           (getX monToEval) (getY monToEval))]
                                                     [else false]))

;------------------  VERIFICATION SIMILARITIES WITHIN THE POLYNOMIAL -----------------------

(define (test pol operador) (map (lambda (x)(operadorMonomial (car pol) x operador)) (cdr pol)))

(define (concatenatePol pol operador pol2) (cond
                                             [(equal? operador -)(append pol (negativePol pol2))][else (append pol pol2)]))
(define (negativePol pol) (map (lambda (x) (getNewMonomial (* (getCoef x)-1) (getX x) (getY x))) pol))

(define (retorno operador mon polBandera polFinal)
  (cond
    ((null? (cdr polBandera)) (mon polFinal))
       (else (cond
               [(areMonomialEqual mon ((car polBandera)))
                (totalMon operador (operadorMonomial mon operador (car polBandera)) (cdr polBandera) polBandera)]
               [else (totalMon operador mon (cdr polBandera) (append polFinal (car polBandera)))]))))



;(define (operadorPolynomial pol operador pol2 respuesta)
 ; (prueba (concatenatePol pol operador pol2) '() operador))

(define (prueba polActualizado polRespuestaFinal operador)
  (cond[
        (null? (cdr polActualizado)) (polRespuestaFinal)]
       [else prueba (second (totalMon operador (car polActualizado) polActualizado '()))
             (append polRespuestaFinal (car (totalMon operador (car polActualizado) polActualizado '()))) ]))



(define (operadorPolynomial pol operador pol2)
  (recursivo operador (car(totalMon operador (car(cdr (concatenatePol pol operador pol2))) (cdr(concatenatePol pol operador pol2)) '()))
                      (cdr(totalMon operador (car(cdr (concatenatePol pol operador pol2))) (cdr(concatenatePol pol operador pol2)) '()))
                      '()))
                                                                 

(define (totalMon operador mon polBandera polFinal)
  (cond
    ((empty? polBandera) (append  (list mon) (list polFinal)))
       (else (cond
               [(areMonomialEqual mon (car polBandera))
               (totalMon operador (operadorMonomial mon operador (car polBandera)) (cdr polBandera) polFinal)]
               [else (totalMon operador mon (cdr polBandera) (append polFinal (list (car polBandera))))]))))

(define (recursivo operador monomio polinomio resultado)(cond[(null? polinomio) (car (list (append resultado (list monomio))))]
                                                             [else (recursivo operador
                                                                              (car(totalMon operador (car polinomio) (cdr polinomio) '()))
                                                                              (first(cdr (totalMon operador (car polinomio) (cdr polinomio) '()))) (append resultado (list monomio)))]))
;(concatenatePol '((1 2 3) (2 3 4) (1 2 3) + '((1 2 3) (2 3 4) (1 2 3))
;(totalMon + '(1 2 3)'((2 3 4) (4 3 4) (1 1 1) (3 3 4)))

;(sumPoli '(2 3 4) '((4 3 4) (1 1 1) (3 3 4)) '((4 3 4) (1 1 1) (3 3 4)))

;(operadorMonomial '(1 2 3) + '(1 2 3))
;(operadorPolynomial '((1 2 3) (2 3 3) (7 1 7)) + '((1 2 3) (2 2 3) (7 7 7) (7 7 7)))
;(car (concatenatePol '((1 2 3) (2 3 4) (1 2 3)) + '((1 2 3) (2 3 4) (1 2 3))))
;
;(define (operadorPolynomial pol operador pol2)
 ; (totalMon + (car(concatenatePol pol operador pol2)) (cdr(concatenatePol pol operador pol2))))


;(define (totalMon operador mon polBandera)
 ; (cond
  ;  ((empty? polBandera) mon)
   ;    (else (cond
    ;           [(areMonomialEqual mon (car polBandera))
     ;          (totalMon operador (operadorMonomial mon operador (car polBandera)) (cdr polBandera))]
      ;         [else (totalMon operador mon (cdr polBandera))]))))
; (recursivo + '(1 2 3) '((4 6 2)(8 9 6) (4 2 3)) '())
;
